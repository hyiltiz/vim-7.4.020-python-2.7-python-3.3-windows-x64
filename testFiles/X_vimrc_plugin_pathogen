"=============================
"====== clang_complete ======
"=============================
let g:clang_user_options = '2> NUL || exit 0"'
let g:clang_use_library = 1
let g:clang_library_path='C:\Program Files (x86)\Vim\vimfiles\bundle\Clang_Complete-Pathogen\plugin'
let clang_snippets_engine="snipmate"
let g:clang_close_preview=1
"REFS:  *) https://github.com/Rip-Rip/clang_complete/wiki
"		*) http://rxwen.blogspot.fr/2012/07/clang-complete-plugin-is-awesome.html

"======================
"====== supertab ======
"======================
"NOTE: 2013-09-13 Attention il faut appuyer sur <CR> pour que la preview window se ferme
"TODO: Trouver un moyen de faire sans

"Super tab attempting to use the text preceding the cursor to decide which type of completion to 
"attempt
let g:SuperTabDefaultCompletionType = "context"
"Sets the key mapping used to insert a literal tab where supertab would otherwise attempt to kick 
"off insert completion
let g:SuperTabMappingTabLiteral='<c-tab>'
let g:SuperTabClosePreviewOnPopupClose=1

"======================
"====== snipmate ======
"======================

"=============================
"====== MiniBufExplorer ======
"=============================
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

"======================
"====== TagList =======
"======================
let Tlist_Ctags_Cmd='/usr/bin/ctags'

"======================
"====== Task List =====
"======================
map <LocalLeader>td <Plug>TaskList
map <LocalLeader>tp <Plug>TlistToggle

"===================
"====== Gundo ======
"===================
map<LocalLeader>g :GundoToggle<CR>

"==========================
"====== vim-r-plugin ======
"==========================

let vimrplugin_r_path = "C:\\Travail\\Tools\\R-3.0.1\\bin\\x64"

"QUOTE: the screen.vim plugin supports both GNU Screen and Tmux, but only Tmux allows you to split
"		the terminal vertical. SEE SCREEN PART OF VIMRC 
"let g:ScreenImpl = 'Tmux'

"QUOTE: If both GNU Screen and Tmux are installed but you prefer to use the GNU Screen application
let vimrplugin_tmux = 0

let r_indent_comment_column = 2
"I CANT MAKE IT WORK THEN I MODIFIED common_globals.vim
"let vimrplugin_term = ""
let vimrplugin_Rterm = 0
let vimrplugin_vimpager = "no"
"disable automatic indentation
let vimrplugin_indent_commented = 0

"QUOTE: the screen.vim plugin to split the terminal horizontally. If you prefer to split it vertically put in your |vimrc|:
let vimrplugin_screenvsplit = 1

"QUOTE: The Vim-R-plugin will add <C-a><C-k> to every command if you put in your |vimrc|:
let vimrplugin_ca_ck = 1

"QUOTE: To enable the syntax method of folding for R files
let r_syntax_folding = 0

"start editing files with all folds open
set nofoldenable
let vimrplugin_buildwait = 10

"QUOTE: the plugin calls the function .vim.list.args() after <LocalLeader>ra
let vimrplugin_listmethods = 1

"QUOTE: Send line" and Send selection map to the space bar in your
vmap <Space> <Plug>RDSendSelection
nmap <LocalLeader><Space> <Plug>RDSendLine
map <LocalLeader>sesam :call RAction("sesam")<CR> 
map <LocalLeader>field :call RAction("field")<CR> 
"Remap plus utiles
map <LocalLeader>r1 :call RAction("head")<CR> 
map <LocalLeader>r2 :call RAction("tail")<CR> 
map <LocalLeader>r3 :call RAction("str")<CR> 

"==========================
"====== latex-suite ======
"==========================
set shellslash
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
"This shows Latex-Suite where to look for the LOCAL TEXMF directory
let g:Tex_TEXINPUTS = 'C:/Travail/Tools/localtexmf/tex/latex/**,./**'



"=======================
"====== ShowMarks ======
"=======================
"This comes from suggestion in vim-r-plugin
let marksCloseWhenSelected = 0
let showmarks_include = "abcdefghijklmnopqrstuvwxyz"

"======================
"====== screen ========
"======================
"To use tmux instead of screen this is usefull for R + vertical split is only available with Tmux
"let g:ScreenImpl = 'Tmux'
let g:ScreenImpl = 'GnuScreen'

"QUOTE: vertical split supported via tmux by default
let g:ScreenShellGnuScreenVerticalSupport = 'native'

"non-zero and not already in a screen session, an external shell will be spawned
"let g:ScreenShellExternal = 1

"QUTE: set to 'shell' the newly created shell region will be focused
let g:ScreenShellInitialFocus = 'vim'

"g:ScreenShellExternal==1 && this value will be used as the name of the terminal to be used
"let g:ScreenShellTerminal = 'gnome-terminal'

"======================
"====== NERDTree ======
"======================
map <leader>n :NERDTreeToggle<CR>

"=================
"====== Ack ======
"=================
nmap <leader>a <Esc>:Ack!

"============================
"====== clang_complete ======
"============================
"let g:clang_snippets = 1
"let g:clang_snippets_engine = 'snipmate'

"======================
"====== commandT ======
"======================
"NOTE: requires +ruby and to do the following
"statquant@euclide:~/.vim/bundle/command-t/ruby/command-t$ ruby extconf.rb 
"statquant@euclide:~/.vim/bundle/command-t/ruby/command-t$ make

"=========================
"====== python_mode ======
"=========================

"*) pylint

" Disable pylint checking every save (replace by 0)
let g:pymode_lint_write = 1

" Load pylint code plugin
let g:pymode_lint = 1

" Switch pylint, pyflakes, pep8, mccabe code-checkers
" Can have multiply values "pep8,pyflakes,mcccabe"
let g:pymode_lint_checker = "pyflakes,pep8,mccabe"

" Skip errors and warnings
" E.g. "E501,W002", "E2,W" (Skip all Warnings and Errors startswith E2) and etc
" let g:pymode_lint_ignore = "E501"

" Select errors and warnings
" E.g. "E4,W"
let g:pymode_lint_select = ""

" Run linter on the fly
let g:pymode_lint_onfly = 0

" Pylint configuration file
" If file not found use 'pylintrc' from python-mode plugin directory
let g:pymode_lint_config = "$HOME/.pylintrc"

" Auto open cwindow if errors be finded
let g:pymode_lint_cwindow = 1

" Show error message if cursor placed at the error line
let g:pymode_lint_message = 1

" Auto jump on first error
let g:pymode_lint_jump = 0

" Hold cursor in current window
" when quickfix is open
let g:pymode_lint_hold = 0

" Place error signs
let g:pymode_lint_signs = 1

" Maximum allowed mccabe complexity
let g:pymode_lint_mccabe_complexity = 8

" Minimal height of pylint error window
let g:pymode_lint_minheight = 3

" Maximal height of pylint error window
let g:pymode_lint_maxheight = 6

"*) pydoc

" Load show documentation plugin
let g:pymode_doc = 1
" Key for show python documentation
let g:pymode_doc_key = 'K'

"*) python

" Load run code plugin
let g:pymode_run = 1
" Key for run python code
let g:pymode_run_key = '<LocalLeader>rf'

"*) rope

" Load rope plugin
let g:pymode_rope = 1

" Auto create and open ropeproject
let g:pymode_rope_auto_project = 1

" Enable autoimport
let g:pymode_rope_enable_autoimport = 1

" Auto generate global cache
let g:pymode_rope_autoimport_generate = 1
let g:pymode_rope_autoimport_underlineds = 0
let g:pymode_rope_codeassist_maxfixes = 10
let g:pymode_rope_sorted_completions = 1
let g:pymode_rope_extended_complete = 1
let g:pymode_rope_autoimport_modules = ["os","shutil","datetime"]
let g:pymode_rope_confirm_saving = 1
let g:pymode_rope_global_prefix = "<C-x>p"
let g:pymode_rope_local_prefix = "<C-c>r"
let g:pymode_rope_vim_completion = 1
let g:pymode_rope_guess_project = 1
let g:pymode_rope_goto_def_newwin = ""
let g:pymode_rope_always_show_complete_menu = 0

"*) virtualenv

" Auto fix vim python paths if virtualenv enabled
let g:pymode_virtualenv = 1

"*) python other

" Enable python folding
let g:pymode_folding = 1

" Enable python objects and motion
let g:pymode_motion = 1

" Additional python paths
let g:pymode_paths = []

" Load breakpoints plugin
let g:pymode_breakpoint = 1

" Key for set/unset breakpoint
let g:pymode_breakpoint_key = '<leader>b'

" Autoremove unused whitespaces
let g:pymode_utils_whitespaces = 1

" Enable pymode indentation
let g:pymode_indent = 1

" Set default pymode python options
let g:pymode_options = 1

"*) python syntax

" Enable pymode's custom syntax highlighting
let g:pymode_syntax = 1

" Enable all python highlightings
let g:pymode_syntax_all = 1

" Highlight "print" as function
let g:pymode_syntax_print_as_function = 0

" Highlight indentation errors
let g:pymode_syntax_indent_errors = g:pymode_syntax_all

" Highlight trailing spaces
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Highlight string formatting
let g:pymode_syntax_string_formatting = g:pymode_syntax_all

" Highlight str.format syntax
let g:pymode_syntax_string_format = g:pymode_syntax_all

" Highlight string.Template syntax
let g:pymode_syntax_string_templates = g:pymode_syntax_all

" Highlight doc-tests
let g:pymode_syntax_doctests = g:pymode_syntax_all

" Highlight builtin objects (__doc__, self, etc)
let g:pymode_syntax_builtin_objs = g:pymode_syntax_all

" Highlight builtin functions
let g:pymode_syntax_builtin_funcs = g:pymode_syntax_all

" Highlight exceptions
let g:pymode_syntax_highlight_exceptions = g:pymode_syntax_all

" For fast machines
let g:pymode_syntax_slow_sync = 0
